var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EconomicScenarioGenerators","category":"page"},{"location":"#EconomicScenarioGenerators","page":"Home","title":"EconomicScenarioGenerators","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EconomicScenarioGenerators.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is in a pre-release stage and is not well tested and the API may change.","category":"page"},{"location":"","page":"Home","title":"Home","text":"EconoicScenarioGenerators.jl is now available via the General Registry. Install and use in the normal way:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Add EconomicScenarioGenerators via Pkg\nimport EconomicScenarioGenerators or using EconomicScenarioGenerators in your code","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Importing-packages","page":"Home","title":"Importing packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First, import both EconomicScenarioGenerators and Yields:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using EconomicScenarioGenerators\nusing Yields","category":"page"},{"location":"#Interest-Rate-Models","page":"Home","title":"Interest Rate Models","text":"","category":"section"},{"location":"#Vasicek","page":"Home","title":"Vasicek","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"m = Vasicek(0.136,0.0168,0.0119,Continuous(0.01)) # a, b, σ, initial Rate\ns = ScenarioGenerator(\n        1,  # timestep\n        30, # projection horizon\n        m,  # model\n    )","category":"page"},{"location":"","page":"Home","title":"Home","text":"This can be iterated over, or you can collect all of the rates like:","category":"page"},{"location":"","page":"Home","title":"Home","text":"rates = collect(s)","category":"page"},{"location":"","page":"Home","title":"Home","text":"or ","category":"page"},{"location":"","page":"Home","title":"Home","text":"for r in s\n    # do something with r\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"And the package integrates with Yields.jl if loaded:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Yields.Forward(s)\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"will produce a yield curve object:","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀Yield Curve (Yields.BootstrappedYieldCurve)⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀           \n               ┌────────────────────────────────────────────────────────────┐           \n          0.02 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ Zero rates\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n               │⠀⠀⠀⢀⡔⠦⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n               │⠀⠀⠀⡜⠀⠀⠈⠣⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n               │⠀⠀⢸⠁⠀⠀⠀⠀⠀⠱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠│           \n   Periodic(1) │⢆⡠⠃⠀⠀⠀⠀⠀⠀⠀⠸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠒⠁⠀│           \n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡔⠃⠀⠀⠀⠀│           \n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠤⢄⡠⠔⠒⠒⠋⠉⠑⠒⠢⠤⠔⠒⠒⠒⠒⠒⠒⠁⠀⠀⠀⠀⠀⠀│           \n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⡠⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡔⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⣀⠤⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⠀⣀⣀⡠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n             0 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⠤⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n               └────────────────────────────────────────────────────────────┘           \n               ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀time⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀30⠀           \n","category":"page"},{"location":"#CoxIngersolRoss","page":"Home","title":"CoxIngersolRoss","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A CIR model:","category":"page"},{"location":"","page":"Home","title":"Home","text":"m = CoxIngersollRoss(0.136,0.0168,0.0119,Continuous(0.01))","category":"page"},{"location":"#Hull-White-Model-using-a-Yields.jl-YieldCurve","page":"Home","title":"Hull White Model using a Yields.jl YieldCurve","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Construct a yield curve and use that as the arbitrage-free forward curve within the Hull-White model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Yields, EconomicScenarioGenerators\nrates =[0.01, 0.01, 0.03, 0.05, 0.07, 0.16, 0.35, 0.92, 1.40, 1.74, 2.31, 2.41] ./ 100\nmats = [1/12, 2/12, 3/12, 6/12, 1, 2, 3, 5, 7, 10, 20, 30]\nc = Yields.CMT(rates,mats)\n\n\nm = HullWhite(.1,.005,c) # a, σ, curve\n\ns = ScenarioGenerator(\n        1,  # timestep\n        30, # projection horizon\n        m,  # model\n    )","category":"page"},{"location":"","page":"Home","title":"Home","text":"Create 1000 yield curves from the scenario generator:","category":"page"},{"location":"","page":"Home","title":"Home","text":"n = 1000\ncurves = [Yields.Forward(s) for i in 1:n]","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Plot the result:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots\n\ntimes = 1:30\np=plot(title=\"EconomicScenarioGenerators.jl Hull White Model\")\nfor d in curves\n    plot!(p,times,Yields.rate.(Yields.zero.(d,times)),alpha=0.2,label=\"\")\nend\n\nplot!(times,Yields.rate.(Yields.zero.(c,times)),line=(:black, 5), label=\"Given Yield Curve\")\np\n    ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: image)","category":"page"},{"location":"#Equity-Models","page":"Home","title":"Equity Models","text":"","category":"section"},{"location":"#BlackScholesMerton","page":"Home","title":"BlackScholesMerton","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"m = BlackScholesMerton(0.01,0.02,.15,100.)\n\ns = ScenarioGenerator(\n               1,  # timestep\n               30, # projection horizon\n               m,  # model\n           )","category":"page"},{"location":"","page":"Home","title":"Home","text":"Instantiate an array of the projection with collect(s).","category":"page"},{"location":"#Plotted-BSM-Example","page":"Home","title":"Plotted BSM Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Plot 100 paths:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots\nprojections = [collect(s) for _ in 1:100]\n\np = plot()\n\nfor p in projections\n    plot!(p,label=\"\")\nend\n\np","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: BSM Paths)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EconomicScenarioGenerators]","category":"page"},{"location":"#EconomicScenarioGenerators.BlackScholesMerton","page":"Home","title":"EconomicScenarioGenerators.BlackScholesMerton","text":"BlackScholesMerton(r,q,σ,initial)\n\nAn equity price model where initial is the initial value of the security.\n\nr is the risk free rate\nq is the dividend yield\nσ is the volatility for the unit period\n\nExample\n\njulia> m = BlackScholesMerton(0.01,0.02,.15,100.)\nBlackScholesMerton{Float64, Float64, Float64}(0.01, 0.02, 0.15, 100.0)\n\njulia> s = ScenarioGenerator(1/252,1.,m,Random.Xoshiro(123))\nScenarioGenerator{Float64, BlackScholesMerton{Float64, Float64, Float64}, Xoshiro}(0.003968253968253968, 1.0, BlackScholesMerton{Float64, Float64, Float64}(0.01, 0.02, 0.15, 100.0), Xoshiro(0xfefa8d41b8f5dca5, 0xf80cc98e147960c1, 0x20e2ccc17662fc1d, 0xea7a7dcb2e787c01))\n\njulia> collect(s)\n253-element Vector{Float64}:\n 100.0\n  99.38331866043562\n  98.01039338118557\n   ⋮\n  88.57032295705861\n  88.40149667285587\n\n\n\n\n\n","category":"type"},{"location":"#EconomicScenarioGenerators.ConstantElasticityofVariance","page":"Home","title":"EconomicScenarioGenerators.ConstantElasticityofVariance","text":"ConstantElasticityofVariance(r,q,σ,β,initial)\n\nWhere initial is the initial value of the security.\n\n\n\n\n\n","category":"type"},{"location":"#EconomicScenarioGenerators.CoxIngersollRoss","page":"Home","title":"EconomicScenarioGenerators.CoxIngersollRoss","text":"CoxIngersollRoss(a,b,σ,initial::Yields.Rate)\n\nA one-factor interest rate model. Parameters:\n\n- `a` characterizes the speed of mean reversion\n- `b` is the long term mean level\n- `σ` is the instantaneous volatility\n\nVia Wikipedia: https://en.wikipedia.org/wiki/Cox%E2%80%93Ingersoll%E2%80%93Ross_model\n\nCan be reinterpreted as a yield curve from Yields.jl with Yields.Forward(s::ScenarioGenerator)\n\nExample\n\n\njulia> m = CoxIngersollRoss(0.136,0.0168,0.0119,Yields.Continuous(0.01))\nCoxIngersollRoss{Yields.Rate{Float64, Continuous}}(0.136, 0.0168, 0.0119, Yields.Rate{Float64, Continuous}(0.01, Continuous()))\n\njulia> s = EconomicScenarioGenerators.ScenarioGenerator(\n           0.5,                              # timestep\n           30.,                             # projection horizon\n           m\n       );\n\n       julia> collect(s)\n       61-element Vector{Yields.Rate{Float64, Continuous}}:\n        Yields.Rate{Float64, Continuous}(0.01, Continuous())\n        Yields.Rate{Float64, Continuous}(0.010355508443426625, Continuous())\n        ⋮\n        Yields.Rate{Float64, Continuous}(0.01170589378629289, Continuous())\n\njulia> Yields.Forward(s)\n\n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀Yield Curve (Yields.BootstrapCurve)⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀           \n        ┌────────────────────────────────────────────────────────────┐           \n  0.018 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ Zero rates\n        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠤⠒⠒⠒⠒⠦⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠢⢄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠓⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒│           \n        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠖⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n        │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \nContinuous │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡠⠤⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n        │⠀⠀⠀⠀⠀⠀⠀⢀⡤⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n        │⠀⠀⠀⠀⠀⢀⡔⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n        │⠀⠀⠀⠀⢀⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n        │⠀⠀⠀⢀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n        │⠀⠀⢠⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n        │⠢⠔⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n  0.009 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n        └────────────────────────────────────────────────────────────┘           \n        ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀time⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀30⠀           \n\n\n\n\n\n","category":"type"},{"location":"#EconomicScenarioGenerators.HullWhite","page":"Home","title":"EconomicScenarioGenerators.HullWhite","text":"HullWhite(a,σ,curve::Yields.AbstractYield)\n\nAn interest model that should be market consistent with the given curve.\n\nVia Wikipedia: https://en.wikipedia.org/wiki/Hull%E2%80%93White_model\n\n\n\n\n\n","category":"type"},{"location":"#EconomicScenarioGenerators.Vasicek","page":"Home","title":"EconomicScenarioGenerators.Vasicek","text":"Vasicek(a,b,σ,initial::Yields.Rate)\n\nA one-factor interest rate model. Parameters:\n\na characterizes the speed of mean reversion\nb is the long term mean level\nσ is the instantaneous volatility\n\nSee more on Wikipedia: https://en.wikipedia.org/wiki/Vasicek_model\n\nCan be reinterpreted as a yield curve from Yields.jl with Yields.Forward(s::ScenarioGenerator)\n\nExample\n\n\njulia> m = Vasicek(0.136,0.0168,0.0119,Yields.Continuous(0.01))\nVasicek{Yields.Rate{Float64, Continuous}}(0.136, 0.0168, 0.0119, Yields.Rate{Float64, Continuous}(0.01, Continuous()))\n\njulia> s = EconomicScenarioGenerators.ScenarioGenerator(\n           0.5,                              # timestep\n           30.,                             # projection horizon\n           m\n       );\n\njulia> collect(s)\n61-element Vector{Yields.Rate{Float64, Continuous}}:\n Yields.Rate{Float64, Continuous}(0.01, Continuous())\n Yields.Rate{Float64, Continuous}(0.010455802777823464, Continuous())\n ⋮\n Yields.Rate{Float64, Continuous}(-0.0027467625238898194, Continuous())\n\n julia> Yields.Forward(s)\n\n              ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀Yield Curve (Yields.BootstrapCurve)⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀           \n              ┌────────────────────────────────────────────────────────────┐           \n         0.03 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ Zero rates\n              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠤⠤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠤⠖⠒⠒⠒⠋⠉⠉⠉⠉│           \n              │⠀⠀⠀⠀⠀⠀⠀⡠⠒⠒⠒⠒⠒⠒⠒⠒⠢⠤⠤⠊⠁⠀⠀⠀⠀⠀⠉⠑⠢⣄⣀⡠⠤⠤⠤⠤⠖⠊⠉⠁⠀⠉⠉⠑⠒⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n              │⠀⠀⠀⠀⠀⠀⡜⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n   Continuous │⠀⠀⠀⠀⠀⡸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n              │⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n              │⠀⠀⣀⣀⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n              │⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n              │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n            0 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│           \n              └────────────────────────────────────────────────────────────┘           \n              ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀time⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀30⠀        \n\n\n\n\n\n","category":"type"},{"location":"#EconomicScenarioGenerators.__outputtype-Union{Tuple{Type{HullWhite{T}}}, Tuple{T}} where T","page":"Home","title":"EconomicScenarioGenerators.__outputtype","text":"__outputtype defines what the iterator's type output is for each element\n\n\n\n\n\n","category":"method"},{"location":"#EconomicScenarioGenerators.__outputtype-Union{Tuple{Type{T}}, Tuple{T}} where T<:EconomicScenarioGenerators.EquityModel","page":"Home","title":"EconomicScenarioGenerators.__outputtype","text":"__outputtype defines what the iterator's type output is for each element\n\n\n\n\n\n","category":"method"},{"location":"#EconomicScenarioGenerators.__outputtype-Union{Tuple{Type{T}}, Tuple{T}} where T<:EconomicScenarioGenerators.ShortRateModel","page":"Home","title":"EconomicScenarioGenerators.__outputtype","text":"__outputtype defines what the iterator's type output is for each element\n\n\n\n\n\n","category":"method"}]
}
